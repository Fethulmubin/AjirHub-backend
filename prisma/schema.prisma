// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your database provider
  url      = env("DATABASE_URL")
}

// 1. User: Every registered person
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String?
  name          String?
  image         String?
  phone         String   @unique
  emailVerified Boolean  @default(false) // <-- add this
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  dailyLimit    Int      @default(1000)
  weeklyLimit   Int      @default(5000)

  // Relations
  accounts      Account[]
  sessions      Session[]
  wirdEntries   WirdEntry[]
  contributions Contribution[]
  campaigns     Campaign[]     @relation("campaigns_created")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// 2. WirdEntry: Daily logs for user
model WirdEntry {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  count     Int
  surah     String? // optional: surah name/code
  note      String? // optional: user notes
  date      DateTime // when logged (UTC)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
}

// 3. Campaign: Shared ajir campaign
model Campaign {
  id              String         @id @default(uuid())
  owner           User           @relation("campaigns_created", fields: [ownerId], references: [id])
  ownerId         String
  title           String
  description     String?
  targetCount     Int // goal (e.g., 10,000 salawat or 114 surahs)
  collectedCount  Int            @default(0) // running total
  maxContributors Int? // optional cap on participants
  status          CampaignStatus @default(ACTIVE)
  createdAt       DateTime       @default(now())
  expiresAt       DateTime?

  // Relations
  contributions Contribution[]

  @@index([status, expiresAt])
}

// 4. Contribution: Userâ€™s effort inside a campaign
model Contribution {
  id         String   @id @default(uuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  count      Int
  surah      String?
  note       String?
  createdAt  DateTime @default(now())

  @@index([campaignId, userId])
}

// 5. CampaignStatus: Campaign lifecycle
enum CampaignStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}
