generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  dailyLimit    Int             @default(1000)
  weeklyLimit   Int             @default(5000)
  image         String?
  name          String?
  password      String?
  emailVerified Boolean         @default(false)
  phone         String          @unique
  accounts      Account[]
  sessions      Session[]
  wirdEntries   WirdEntry[]
  contributions Contribution[]
  campaigns     Campaign[]      @relation("campaigns_created")
  memberships   CampaignMember[]

}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model WirdEntry {
  id        String   @id @default(uuid())
  userId    String
  count     Int
  surah     String?
  note      String?
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, date])
}

model Campaign {
  id              String           @id @default(uuid())
  ownerId         String
  title           String
  description     String?
  targetCount     Int
  collectedCount  Int              @default(0)
  maxContributors Int?
  status          CampaignStatus   @default(ACTIVE)
  createdAt       DateTime         @default(now())
  expiresAt       DateTime?
  owner           User             @relation("campaigns_created", fields: [ownerId], references: [id])
  contributions   Contribution[]
  members         CampaignMember[]

  @@index([status, expiresAt])
}

model Contribution {
  id         String   @id @default(uuid())
  campaignId String
  userId     String
  count      Int
  surah      String?
  note       String?
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([campaignId, userId])
}

model CampaignMember {
  id          String            @id @default(uuid())
  campaignId  String
  userId      String
  role        CampaignRole      @default(PARTICIPANT)
  status      MembershipStatus  @default(PENDING)
  createdAt   DateTime          @default(now())
  campaign    Campaign          @relation(fields: [campaignId], references: [id])
  user        User              @relation(fields: [userId], references: [id])

  @@unique([campaignId, userId])
}

enum CampaignStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum CampaignRole {
  OWNER
  PARTICIPANT
}

enum MembershipStatus {
  PENDING     // waiting for approval
  ACCEPTED    // joined successfully
  INVITED     // invited but not yet accepted
  REJECTED    // rejected by owner
}
